""""""""""""""""""""""""""""""
" ~ VIMRC ~ for Vim >= 8 && Neovim
""""""""""""""""""""""""""""""
" Author: Chris Jones
" Source: http://github.com/ipatch/dotfiles/blob/master/editors/vim/vimrc
""

""""""""""""""""""""""""""""""
" Notes / gotchas
""

" To print the value of a below setting, ie. return the value set,
" `:set autoindent?`
" SEE: `~/.vim/after/ftplugin/vim.vim` for settings related to `.vim`

" Want to set this first, the default 'leader' key is `\`
let g:mapleader = ','                 " set the 'leader' key to `,`

" Don't allow vi compatibility mode; don't need it ü§Ω‚Äç‚ôÇÔ∏è
set nocompatible
" Settings
set mouse=a                           " enable mouse support
set fileencoding=utf-8                " Set utf-8 encoding on write
set encoding=utf-8                    " terminal output encoding
set termencoding=utf-8
set title                             " Set the title on the terminal tab
set number
set relativenumber                    " Show numbers relative to current line
set background=dark
set cursorline                        " Highlight current line
set backspace=eol,start,indent        " Configure sane backspace
filetype plugin indent on " detect & enable filetype specific plugins
syntax on
set history=500                       " History for days üòõ
set showcmd                           " Show incomplete cmds in lower right 
set noshowmode                        " let status line show mode
set laststatus=2
set modelines=5
set vb t_vb=
""""""""""""""""""""""""""""""
" hidden chars
""
set listchars=tab:‚Ä£\
set listchars+=nbsp:‚¶∏   " CIRCLED REVERSE SOLIDUS (U+29B8, UTF-8: E2 A6 B8)
set listchars+=extends:¬ª " RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK (U+00BB, UTF-8: C2 BB)
set listchars+=precedes:¬´ " LEFT-POINTING DOUBLE ANGLE QUOTATION MARK (U+00AB, UTF-8: C2 AB)
set listchars+=trail:‚Ä¢    " BULLET (U+2022, UTF-8: E2 80 A2)
set listchars+=eol:¬¨
set fillchars+=stl:\ ,stlnc:\
"""""""""""""""
" toggle hidden chars & Settings for hidden chars
""
nmap <leader>l :set list!<CR>

if has('linebreak')
  let &showbreak='‚Ü≥ ' " DOWNWARDS ARROW WITH TIP RIGHTWARDS (U+21B3, UTF-8: E2 86 B3)
endif

""""""""""""""""""""""""""""""
" Spelling
""
if has('syntax')
  set spellcapcheck= " don't check for capital letters at start of sentence
endif

" set spell                           " disable spell checking
set spelllang=en_us                   " set the language for spelling words
language en_US

""""""""""""""""""""""""""""""
" wrapping
""
set wrap
set linebreak

""""""""""""""""""""""""""""""
" search
""
set hlsearch                          " Highlight search results
set ignorecase                        " Ignore case when sarching
set smartcase                         " become case-sensitive if uppercase present
" Stop highlighting on Enter
map <CR> :nohl<CR> 
set incsearch
set nojoinspaces
set display+=lastline
set showmatch                         " show matching braces

"""""""""""""""""""""""""""""
" Indentation / tab shit
""
" set ts=2 sts=2 sw=2 expandtab 
set shiftwidth=2 " Indent 2 spaces < and > commands as well.
set softtabstop=2
set tabstop=2        " Indicates how many `spaces` a `tab` will indent
set expandtab                           " spaces are better than tabs üí•
set nofoldenable
set tabstop=2
set ai                                  " set auto indent
set smartindent
set hidden                              " set sane buffer switching
set smarttab     " <tab>/<BS> indent/dedent in leading whitespace

"""""""""""""""""""""""""""""
" Settings - Visual Tabs
""
" NOTE: tabs AREN"T buffers, always try and use buffers when possible.
set showtabline=0                       " only show if 2 or more tabs.

"""""""""""""""""""""""""""""
" plugin - buftabline
""
" let g:buftabline_show=1 " only if >1 buffer
let g:buftabline_show=2 " always show buffer bar.
let g:buftabline_numbers=2 " oridnal number
let g:buftabline_indicators=1 " display state of buffer, `+` = unsaved changes
nmap <Leader>1 <Plug>BufTabLine.Go(1)
nmap <Leader>2 <Plug>BufTabLine.Go(2)
nmap <Leader>3 <Plug>BufTabLine.Go(3)
nmap <Leader>4 <Plug>BufTabLine.Go(4)
nmap <Leader>5 <Plug>BufTabLine.Go(5)
nmap <Leader>6 <Plug>BufTabLine.Go(6)
nmap <Leader>7 <Plug>BufTabLine.Go(7)
nmap <Leader>8 <Plug>BufTabLine.Go(8)
nmap <Leader>9 <Plug>BufTabline.Go(9)

"""""""""""""""""""""""""""""
" Key mappings / bindings
""
" NOTE: the below configuration line will map the 'space bar' to ':' so that
" way 'Shift+;' does not have to be pressed to begin a command in normal mode.
nmap <space> :

" use ,, for escape <ESC>
inoremap ,, <ESC>
" cmap ,, <ESC> " NOTE: the following key binding did not work.
" NOTE: use <Ctrl>+<[> to exit command line mode.

" Note - the below insert mappings will bind 'jk' / 'kj' to the ESC
" key functionality, so the ESC key does not need to be pressed in insert 
" mode.
imap jk <esc>
imap kj <esc>
imap jj <esc>

noremap <silent> <Up> <ESC><Up>
inoremap <silent> <Down> <ESC><Down>

" Fast saving
noremap <leader>w :w<CR>

" Command mode shortcuts
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" the below key mapping will indent the entire file
map <Leader>i mmgg=G`m<CR>

" go into command mode and print the working dir
" TODO: figure out a way to print the `cwd` or `pwd` quckily from `NORMAL` mode
" NOTE: none of the below mappings with work properly until `%%` is resolved ü§∑‚Äç‚ôÄÔ∏è
" cnoremap %% <C-R>=fnamescape(expand('%:h')).'/'<cr>
" map <leader>ew :e %%
" " open file in new split
" map <leader>es :sp %%
" " edit file in new vertical split
" map <leader>ev :vsp %%
" " edit file in new tab
" map <leader>et :tabe %%

" bubbling text
nmap <S-k> ddkP
nmap <S-j> ddp
" bubble multiple lines
vmap <S-k> xkP`[V`]
vmap <S-j> xp`[V`]

"""""""""""""""""""""""""""""
" Useful hacks for working with `$HOME/.vimrc or $MYVIMRC
""
nmap <leader>v :edit $MYVIMRC<CR>
map <leader>so :source $MYVIMRC<CR>

" Toggle spell checking
nmap <silent> <leader>s :set spell!<CR>

" Toggle between last 2 buffers
nnoremap <leader><tab> <c-^>

map ,e :e <C-R>=expand("%:p:h") . "/" <CR>
map ,t :tabe <C-R>=expand("%:p:h") . "/" <CR>

" If you opened a readonly file, ie. /etc/hosts `w!!` solve :)
cmap w!! w !sudo tee % >/dev/null %

""""""""""""""""""""""""""""""
" Buffer Handling
""
nmap <Leader>t :enew<CR>
nmap <Leader>] :bnext<CR>
nmap <Leader>[ :bprevious<CR>

"""""""""""""""""""""""""""""
" Abbreviations
""
cnoreabbrev t tabe
cnoreabbrev T tabe

""""""""""""""""""""""""""""""
" colorscheme
""
let base16colorspace = 256 " Access colors present in 256 colorspace
colorscheme base16-default-dark

""""""""""""""""""""""""""""""
" fonts
""
highlight Comment gui=italic
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors " use guifg/guibg instead of ctermfg/ctermbg in terminal

" set guifont=IBMPlexMono\ Nerd\ Font\ Mono\ ExtraLight:h13
" set guifont=Monaco:h10


"""""""""""""""""""""""""""""
" conceal levels
""
" toggle between different conceal levels
function! ToggleConcealLevel()
  if &conceallevel == 0
    setlocal conceallevel=2
  elseif &conceallevel == 1
    setlocal conceallevel=0
  elseif &conceallevel == 2
    setlocal conceallevel=0
  endif
endfunction

nnoremap <silent> ` :call ToggleConcealLevel()<CR>

"""""""""""""""""""""""""""""
" netrw - file explorer
""
" CREDIT: https://shapeshed.com/vim-netrw/   

let g:netrw_liststyle = 3 " tree style
let g:netrw_banner = 0 " Do not display the banner when using Netrw
let g:netrw_browse_split = 1 " TODO: figure out what this variable does ???
let g:netrw_winsize = 25 " set the default width for netrw
" TODO: document what the below variable does to netrw
let g:netrw_altv = 1
" Set atom style macOS key binding to open the project drawer
" CREDIT: https://stackoverflow.com/a/23069285/708807
nnoremap <M-\> :Lexplore<cr>
inoremap <M-\> :Lexplore<cr>

" https://vi.stackexchange.com/a/13012
" Per default, netrw leaves unmodified buffers open. This autocommand
" deletes netrw's buffer once it's hidden (using ':q', for example)
augroup netrw_delete_hidden_augroup
    autocmd!
    autocmd FileType netrw setl bufhidden=delete
augroup END

""""""""""""""""""""""""""""""
" Cool hacky stuff
""

" Make sure Vim returns to the same line when reopening a file.
augroup line_return
  au!
  au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END



"""""""""""""""""""""""""""""
" auto commands
""
augroup vimrc
  autocmd!
augroup END

autocmd vimrc FocusGained,BufEnter * checktime " Refresh file when vim gets focus

"""""""""""""""""""""""""""""
" wildmenu -  completion
""
if has('wildmenu')
  set wildmenu " display menu when using `tab` completeion
endif
set wildmode=full " Specifies how the `tab` completion works in wildmenu
set wildignore=*.o,*.obj,*~           "stuff to ignore when tab completing
set wildignore+=*/tmp/*,*/.git/*      " ignore the below directories with wild menu
set wildignore+=*logs*
set wildignore+=*node_modules/**
set wildignore+=*DS_Store*
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.pdf,*.psd,*.git/*,session.vim

""""""""""""""""""""""""""""""
" Scrolling
""
set scrolloff=3              " start scrolling 3 lines before edge of viewport

" load `fzf` from homebrew install
if has('macunix')
  set rtp+=/usr/local/opt/fzf
endif

if has('unix')
  set rtp+=/home/linuxbrew/.linuxbrew/bin/fzf
endif

" NOTE: minpac will need to be cloned from github before packages can be installed.
set packpath^=~/.vim
packadd minpac
call minpac#init()
call minpac#add('k-takata/minpac', {'type': 'opt'})

"""""""""""""""""""""""""""""
" Neovim - specific settings 
""
if has('nvim')
  let g:loaded_sensible=0
  " Keymappings for Neovim
  " By default to exit out of `terminal` mode in nvim use `<C-\><C-n>`
  " Instead map `<Esc>`
  tnoremap <Esc> <C-\><C-n>
  tnoremap <A-[> <Esc>

  """""""""""""""""""""""""""
  " color - true color support
  ""
  let $NVIM_TUI_ENABLE_TRUE_COLOR = 1   " Legacy way to enable 24bit color.

  " NOTE: the above line is ignored in Neovim 0.1.5 above, use below instead.
  if has('nvim-0.1.5')
    set termguicolors " use guifg/guibg instead of ctermfg/ctermbg in terminal
    hi Cursor guifg=green guibg=green
    hi Cursor2 guifg=red guibg=red
    set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50
  endif
  """""""""""""""""""""""""""
  " Neovim only plugins
  ""
  call minpac#add('Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' })
  """"""""""""""""""""""""""""""
  " deoplete specific settings
  ""
  " let g:deoplete#enable_ignore_case = 1
  " let g:deoplete#enable_smart_case = 1
  " filetype plugin on
  " set omnifunc=sytnaxcomplete#Complete
  " set completeopt=longest,menuone,preview
  " let g:deoplete#enable_at_startup = 1
  " let g:deoplete#file#enable_buffer_path = 1

  " deoplete tab-complete
  inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
  """"""""""""""""""""""""""""""
  " markdown .md preview
  ""
  call minpac#add('euclio/vim-markdown-composer', { 'do': '!cargo build --release'}, executable('cargo') && has('nvim'))
endif

""""""""""""""""""""""""""""""
" clipboard
""
if has('clipboard')
  if has('unnamedplus') && !has('nvim') " When possible use `+` register for copy-paste
    set clipboard=unnamed,unnamedplus
  else
    set clipboard=unnamed
  endif
endif

" get sane copy / paste within nvim using iTerm2
" CREDIT: üí≥ https://github.com/neovim/neovim/issues/5052#issuecomment-232083842
vnoremap <M-c> "+y
nnoremap <M-v> "+p
inoremap <M-v> <esc>"+p

" NOTE: apparently `:map` and `:map!` will map to all modes of (n)vim
" CREDIT: üí≥ https://stackoverflow.com/a/21282417/708807
" NOTE: if using iTerm2 on macOS make sure the proper escape sequence is
" mapped within the iTerm2 settings.
nnoremap <M-z> u
inoremap <M-z> <C-o>u

""""""""""""""""""""""""""""""
" minpac - plugins
""
call minpac#add('machakann/vim-highlightedyank') " name says it all
call minpac#add('chriskempson/base16-vim') " pretty colors üåà and aesthetics 
call minpac#add('Yggdroot/indentLine') " Add vertical indentation lines
call minpac#add('sheerun/vim-polyglot') " lazy load syntax highlighting
call minpac#add('tpope/vim-commentary') " quickly comment lines, ie. Atom
call minpac#add('junegunn/fzf') " required! the below won't work without this!
call minpac#add('junegunn/fzf.vim') " fuzzy finding goodness
call minpac#add('christoomey/vim-tmux-navigator') " vim / tmux navigation üëç
call minpac#add('slashmili/alchemist.vim') " useful for working with Elixir
call minpac#add('tpope/vim-dispatch') " compile üí©  asynchronously
call minpac#add('radenling/vim-dispatch-neovim') " dispatch using neovims terminal features
call minpac#add('w0rp/ale') " ALE Asynchronous Linting Edition
call minpac#add('janko-m/vim-test') " a plugin for running test suites.
call minpac#add('ludovicchabant/vim-gutentags') " auto generate ctags
" call minpac#add('ryanoasis/vim-devicons') " purdy icons / glyphs
" call minpac#add('tpope/vim-fugitive')
" call minpac#add('prashanthellina/follow-markdown-links') " navigating markdown
call minpac#add('itchyny/lightline.vim') " lightweight status line.
call minpac#add('ap/vim-buftabline') " lightweight buffer bar @ top.
" call minpac#add('tpope/vim-obsession') " tpopes implementation for vim sessions

"""""""""""""""""""""""""""""
" minpac - commands
"" 
command! PackUpdate packadd minpac | source $MYVIMRC | call minpac#update()
command! PackClean  packadd minpac | source $MYVIMRC | call minpac#clean()

"""""""""""""""""""""""""""""
" vim-fugitive settings - https://github.com/tpope/vim-fugitive
""
" set statusline=%{fugitive#statusline()}

"""""""""""""""""""""""""""""
" plugin - lightline.vim
""
let g:lightline = {
      \ 'active': {
      \ 'left': [ [ 'mode', 'paste' ],
      \           [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \ },
      \ 'component_function': {
      \ 'gitbranch': 'fugitive#head',
      \ 'filename': 'LightlineFilename'
      \ },
      \ }

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

"""""""""""""""
" plugin - lightline - mode map
" NOTE: abbreviations for mode maps
" n - normal
" i - insert
" R - replace
" v - visual
" V - v-line
" c - command
" s - select
" S - s-line
" t - terminal
""
let g:lightline.mode_map = {
      \ 'n' : 'N',
      \ 'i' : 'I',
      \ 'R' : 'REPLACE',
      \ 'v' : 'VISUAL',
      \ 'V' : 'V-LINE',
      \ "\<C-v>": 'V-BLOCK',
      \ 'c' : 'COMMAND',
      \ 's' : 'SELECT',
      \ 'S' : 'S-LINE',
      \ "\<C-s>": 'S-BLOCK',
      \ 't': 'TERMINAL',
      \ }

""""""""""""""""""""""""""""""
" plugin - commentary
""
" Easy commenting of lines using tpope's plugin.
" CREDIT: üí≥ https://github.com/neovim/neovim/issues/5052#issuecomment-232083842
noremap <leader>c :Commentary<cr>

""""""""""""""""""""""""""""""
" plugin - guntentags
""
set statusline+=%{gutentags#statusline()} " update status line if tags are building

""""""""""""""""""""""""""""""
" plugin (kindof) ctags
""
set tags=.tags,tags,./.git/tags,../tags,$HOME,.tags;

""""""""""""""""""""""""""""""
" plugin - FZF
""
if &runtimepath =~ 'fzf'
  nmap ; :Buffers<CR>
  nmap <Leader>f :Files<CR>
  command! FZFMru call fzf#run({
        \  'source':  v:oldfiles,
        \  'sink':    'e',
        \  'options': '-m -x +s',
        \  'down':    '40%'})
  nmap <Leader>r :FZFMru<CR>
  " Toggle buffer list
  " nnoremap <C-p> :Files<CR>
  nnoremap <C-p> :<C-u>FZF<CR>
  nnoremap <Leader>b :Buffers<CR>
  nnoremap <Leader>t :BTags<CR>
  nnoremap <Leader>m :History<CR>

  " You can set up fzf window using a Vim command (Neovim or Vim 8 required)
  let g:fzf_layout = { 'window': 'enew' }
  let g:fzf_layout = { 'window': '-tabnew' }
  let g:fzf_layout = { 'window': '10split enew' }

  " --column: Show column number
  " --line-number: Show line number
  " --no-heading: Do not show file headings in results
  " --fixed-strings: Search term as a literal string
  " --ignore-case: Case insensitive search
  " --no-ignore: Do not respect .gitignore, etc...
  " --hidden: Search hidden files and folders
  " --follow: Follow symlinks
  " --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
  " --color: Search color options

  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)
endif

""""""""""""""""""""""""""""""
" filetype syntax highlighting üåà  shit üí©
""
augroup filetypedetect
  autocmd BufNewFile,BufRead *.fish set filetype=fish
augroup END

""""""""""""""""""""""""""""""
" markdown `.md` syntax support
""
autocmd BufNewFile,BufReadPost *.{md,markdown,mkd,mkdn} set filetype=markdown
" for fenced language support in markdown documents
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'js=javascript', 'json=javascript', 'ruby']

"""""""""""""""""""""""""""""'
" shell `.sh` syntax support
""
"""""""""""""""
" NOTE: vim  defaults to `sh` syntax, NOT `bash` syntax for `.sh` files
"""""""""""""""
" SEE: :help ft-sh-syntax
"""""""""""""""
let g:is_bash = 1 " set default sh syntax to that of bash
let g:sh_fold_enabled = 1 " default = 0, 1 = function folding

""""""""""""""""""""""""""""""
" sessions - buffers
""
set sessionoptions=buffers,winsize,blank,slash,unix

""""""""""""""""""""""""""""""
" views - folds, etc etc
""
set foldcolumn=2 " width of gutter outlining folds
" set viewoptions+=cursor,folds,slash,unix
""""""""""""""""""""""""""""""
" save view sate
" autocmd BufWinLeave * silent! mkview " save view (state) (folds, cursor, etc)
" autocmd BufWinEnter * silent! loadview " load view (state)

" buffers
""
" NOTE: DON'T ENABLE `autochdir` makes easier for managing `session.vim` files
" set autochdir " set working directory to the current file

"""""""""""""""""""""""""""""
" plugin - indentLine - settings / configuration
" SEE: https://github.com/Yggdroot/indentLine
""
let g:indentLine_setColors = 1 " overwrite colorscheme, use default grey


""""""""""""""""""""""""""""""
" plugin - ale-config - settings / configuration
""
let g:ale_linters = {
      \ 'javascript': ['eslint'],
      \ }
" Mappings in the style of unimpaired-next
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_save = 1 " default
let g:ale_lint_on_enter = 0
let g:ale_lint_on_filetype_changed = 0
let g:ale_sign_error                 = '‚å¶'
let g:ale_sign_warning               = '‚òû'

