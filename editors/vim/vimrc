set fileencoding=utf-8                " Set utf-8 encoding on write
scriptencoding utf-8

""""""""""""""""""""""""""""""
" ~ VIMRC ~ for Vim >= 8 && Neovim
" Author: Chris Jones
" Source: http://github.com/ipatch/dotfiles/blob/master/editors/vim/vimrc
" Source: https://git.io/vpEKR
""

""""""""""""""""""""""""""""""
" Notes / gotchas - some good things to know before hacking `~/.vimrc`
" NOTE: this rc file is being linted with `vint`
" NOTE: https://github.com/Kuniwak/vint
" NOTE: To print the value of a setting, ie. return the value set,
" `:set autoindent?`
" SEE: `~/.vim/after/ftplugin/vim.vim` for settings related to `.vim`
""

" set this first, the default `leader` key is `\`
let g:mapleader = ',' " set the 'leader' key to `,` ie. comma

" Don't allow vi compatibility mode; don't need it ðŸ¤½
" set nocompatible "Enable at own risk, can have undesired effects
" SEE: `:help nocompatible` for more info.
""

" Settings
set mouse=a                           " enable mouse support
" set termencoding=utf-8
set title                             " Set the title on the terminal tab
set number " display the absolute number on the current line
set relativenumber                    " Show numbers relative to current line
set background=dark
set cursorline                        " Highlight current line
set backspace=eol,start,indent        " Configure sane backspace
filetype plugin indent on " detect & enable filetype specific plugins
syntax on
set history=500                       " History for days ðŸ˜›
set showcmd                           " Show incomplete cmds in lower right 
set noshowmode                        " let status line show mode
set laststatus=2
set modelines=5
set visualbell t_vb= " DON'T abbr to `vb` use `visualbell`

"""""""""""""""""""""""""""""
" hidden chars
""
set listchars+=tab:â€£\
set listchars+=nbsp:â¦¸   " CIRCLED REVERSE SOLIDUS (U+29B8, UTF-8: E2 A6 B8)
set listchars+=extends:Â» " RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK (U+00BB, UTF-8: C2 BB)
set listchars+=precedes:Â« " LEFT-POINTING DOUBLE ANGLE QUOTATION MARK (U+00AB, UTF-8: C2 AB)
set listchars+=trail:â€¢    " BULLET (U+2022, UTF-8: E2 80 A2)
set listchars+=eol:Â¬
set fillchars+=stl:\ ,stlnc:\
"""""""""""""""
" toggle hidden chars & Settings for hidden chars
""
nmap <leader>h :set list!<CR>

if has('linebreak')
  let &showbreak='â†³ ' " DOWNWARDS ARROW WITH TIP RIGHTWARDS (U+21B3, UTF-8: E2 86 B3)
endif

""""""""""""""""""""""""""""""
" Spelling
""
if has('syntax')
  set spellcapcheck= " don't check for capital letters at start of sentence
endif

" set spell                           
set spelllang=en_us                   " set the language for spelling words
language en_US

""""""""""""""""""""""""""""""
" wrapping
""
set wrap
set linebreak

""""""""""""""""""""""""""""""
" search
""
set hlsearch                          " Highlight search results
set ignorecase                        " Ignore case when sarching
set smartcase                         " become case-sensitive if uppercase present
" Stop highlighting on Enter
map <CR> :nohl<CR> 
set incsearch
set nojoinspaces
set display+=lastline
set showmatch                         " show matching braces

"""""""""""""""""""""""""""""
" Indentation / tab shit
""
" set ts=2 sts=2 sw=2 expandtab 
set shiftwidth=2 " Indent 2 spaces < and > commands as well.
set softtabstop=2
set tabstop=2        " Indicates how many `spaces` a `tab` will indent
set expandtab                           " spaces are better than tabs ðŸ’¥
set nofoldenable
set tabstop=2
set autoindent " DON'T abbrv to `ai`, use `autointdent` set auto indent
set smartindent
set hidden                              " set sane buffer switching
set smarttab     " <tab>/<BS> indent/dedent in leading whitespace

"""""""""""""""""""""""""""""
" Settings - Visual Tabs
""
" NOTE: tabs AREN"T buffers, always try and use buffers when possible.
set showtabline=0                       " only show if 2 or more tabs.

"""""""""""""""""""""""""""""
" Settings - Key mappings / bindings
""
" NOTE: `meta` ie. `âŒ˜.` within iTerm2 require escape sequences to be mapped
" NOTE: apparently `:map` and `:map!` will map to all modes of (n)vim
" NOTE: the below configuration line will map the `spacebar` to ':' so that
" way `Shift+;` does not have to be pressed to begin a command in normal mode.
nmap <space> :


" NOTE: - the below insert mappings will bind 'jk' / 'kj' to the ESC
" key functionality, so need for the <ESC> key in insert mode
imap jk <esc>
imap kj <esc>
imap jj <esc>
imap kk <esc>

" use `,,` for escape <ESC>
inoremap ,, <ESC>

noremap <silent> <Up> <ESC><Up>
inoremap <silent> <Down> <ESC><Down>

" Fast saving
noremap <leader>w :w<CR>

" Command mode shortcuts
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" the below key mapping will indent the entire file
map <Leader>i mmgg=G`m<CR>

" go into command mode and print the working dir
" TODO: figure out a way to print the `cwd` or `pwd` quckily from `NORMAL` mode
" NOTE: `:pwd` works for the time being ðŸ¤·  

" bubbling text - Normal mode
nmap <S-k> ddkP
nmap <S-j> ddp

" bubble multiple lines - Visual mode
vmap <S-k> xkP`[V`]
vmap <S-j> xp`[V`]

" navigate lines that have been virtually wrapped within a document as single.
nnoremap j gj
nnoremap k gk

" NOTE: if the `<C-o>` is not specified then the `gj` or `gk` will literally be
" printed to the screen.
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" create a directory if it doesn't exist
nmap <silent> <leader>mkd :!mkdir -p %:p:h<CR>

"""""""""""""""""""""""""""""
" Useful hacks for working with `$HOME/.vimrc` or `$MYVIMRC`
""
" TODO: come up with sane mappings for editing `~/.vimrc` and `~/.config/nvim/init.vim`
" nmap <leader>ovimrc :edit $MYVIMRC<CR>
" map <leader>svim :source $MYVIMRC<CR>

" Toggle spell checking
nmap <silent> <leader>s :set spell!<CR>

" Open a new buffer in current session
map ,e :e <C-R>=expand("%:p:h") . "/" <CR>

" When opening a readonly file, ie. /etc/hosts `w!!` ðŸš‘
" cmap w!! w !sudo tee % >/dev/null %
cmap w!! %!sudo tee > /dev/null %

""""""""""""""""""""""""""""""
" check for current OS
" NOTE: `:echo os` to print the value in the current buffer
""
function! GetRunningOS()
  if has('win32')
    return 'win32'
  elseif has('win32unix')
    return 'win32unix'
  elseif has('macunix')
    set shell=bash
    set clipboard+=unnamedplus
    return 'macos'
  elseif has ('unix')
    if system('uname')=~?'Linux'
      set shell=bash
      set clipboard+=unnamedplus
      return 'linux'
    endif
  else
    " catch all ðŸŽ£ everything else
  endif
endfunction
let g:os = GetRunningOS()

""""""""""""""""""""""""""""""
" settings - clipboard
""
" if has('clipboard')
"   if has('unnamedplus')
"     set clipboard+=unnamedplus " NOTE: also know as `*`
"     if g:os ==? 'macos'
"       let g:clipboard = 'pbcopy'
"     elseif g:os ==? 'linux'
"       let g:clipboard = 'xclip'
"     elseif g:os ==? 'win'
"       " set windows clipboard
"     else
"       " catch all for clipboard
"     endif
"   elseif has('unnamed')
"     set clipboard+=unnamed " NOTE: also known as `*`
"     if g:os ==? 'macos'
"       let g:clipboard = 'pbcopy'
"     elseif g:os ==? 'linux'
"       let g:clipboard = 'xclip'
"     elseif g:os ==? 'win'
"       " set windows clipboard
"     else
"       " catch all for clipboard
"     endif

"     " Add check for `$TERM` to see if (n)vim is running within `tmux`

"   elseif !exists('$TMUX')
"     let g:clipboard = 'tmux'
"  endif 
" endif

" NOTE: if (n)vim has access to both clipboards it will put copy / paste operations into both clipboards.
" NOTE: iterm2 make sure to set proper escape sequences.
vnoremap <M-c> "+y
nnoremap <M-v> "+p
inoremap <M-v> <esc>"+p
" Generic undo using `âŒ˜ + z` for normal and insert modes
nnoremap <M-z> u
inoremap <M-z> <C-o>u

""""""""""""""""""""""""""""""
" Settings - Buffer Handling
""
nmap <Leader>t :enew<CR>
nnoremap <silent> <leader>T :bp<CR>
nnoremap <silent> <leader>t :bn<CR>

""""""""""""""""""""""""""""""
" colorscheme
""
" NOTE: make scope explicit, ie. `let g:[mr-fancy-setting]` NOT `let
" [mr-fancy-setting`
let g:base16colorspace = 256 " Access colors present in 256 colorspace
colorscheme base16-default-dark

""""""""""""""""""""""""""""""
" fonts
""
highlight Comment gui=italic
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors " use guifg/guibg instead of ctermfg/ctermbg in terminal

" set guifont=IBMPlexMono\ Nerd\ Font\ Mono\ ExtraLight:h13
" set guifont=Monaco:h10

"""""""""""""""""""""""""""""
" conceal levels
""
" toggle between different conceal levels
function! ToggleConcealLevel()
  if &conceallevel == 0
    setlocal conceallevel=2
  elseif &conceallevel == 1
    setlocal conceallevel=0
  elseif &conceallevel == 2
    setlocal conceallevel=0
  endif
endfunction

nnoremap <silent> ` :call ToggleConcealLevel()<CR>
" set default conceal level
" NOTE: `indentLine` will control conceal levels if installed
set conceallevel=0 " DO NOT conceal any text

"""""""""""""""""""""""""""""
" netrw - file explorer
""
" CREDIT: https://shapeshed.com/vim-netrw/   

let g:netrw_liststyle = 3 " tree style
let g:netrw_banner = 0 " Do not display the banner when using Netrw
let g:netrw_browse_split = 1 " TODO: figure out what this variable does ???
let g:netrw_winsize = 25 " set the default width for netrw
" TODO: document what the below variable does to netrw
let g:netrw_altv = 1
" Set atom style macOS key binding to open the project drawer
" CREDIT: https://stackoverflow.com/a/23069285/708807
" NOTE: toggling netrw sucks!
" TODO: get a sane toggle expierence going ...eventually!
nnoremap <M-\> :Lexplore<cr>
inoremap <M-\> :Lexplore<cr>

" https://vi.stackexchange.com/a/13012
" Per default, netrw leaves unmodified buffers open. This autocommand
" deletes netrw's buffer once it's hidden (using ':q', for example)
augroup netrw_delete_hidden_augroup
  autocmd!
  autocmd FileType netrw setl bufhidden=delete
augroup END

"""""""""""""""""""""""""""""
" autocommands
""
augroup buffer_refresh
  autocmd!
  autocmd buffer_refresh FocusGained,BufEnter * checktime "reload buffer on focus
augroup END

""""""""""""""""""""""""""""""
" autocommand - `line_return`
" NOTE: return to the line number when reopening a buffer / file
""
augroup line_return
  au!
  au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

""""""""""""""""""""""""""""""
" autocommand - `conceal_return`
" NOTE: a simple command / function to resume conceal settings when reopening a
" bufffer
""
augroup conceal_return

augroup END

""""""""""""""""""""""""""""""
" autocommand - `fold_return`
" NOTE: a simple command / function to resume fold settings when reopening a
" buffer
""
augroup fold_return

augroup END

"""""""""""""""""""""""""""""
" wildmenu -  completion
""
if has('wildmenu')
  set wildmenu " display menu when using `tab` completeion
  set wildmode=full " Specifies how the `tab` completion works in wildmenu
  set wildignore=*.o,*.obj,*~           "stuff to ignore when tab completing
  set wildignore+=*/.git/*      " ignore the below directories with wild menu
  set wildignore+=*logs*
  set wildignore+=*node_modules/**
  set wildignore+=*DS_Store*
  set wildignore+=*.gem
  set wildignore+=log/**
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.pdf,*.psd,session.vim
endif

""""""""""""""""""""""""""""""
" Scrolling
""
set scrolloff=3 " start scrolling 3 lines before edge of viewport

" load `fzf` from homebrew  / Linuxbrew installs
if os ==? 'macos'
  set runtimepath+=/usr/local/opt/fzf
elseif os ==? 'Linux'
  set runtimepath+=/home/linuxbrew/.linuxbrew/bin/fzf
else
  " No love ðŸ’” for the other guys
endif

" NOTE: clone minpac first before installing plugins.
set packpath^=~/.vim
" Try to load minpac.
silent! packadd minpac

if !exists('*minpac#init')
  " minpac is NOT available
  echo 'Yo!, you need minpac dawg!'
  " Settings for plugin-less, ie no minpac ðŸ˜¥ environment.
  if empty(glob('~/.vim/pack/minpac/opt/minpac/plugin/minpac.vim'))
    silent !curl -fLo ~/.vim/pack/minpac/opt/minpac/plugin/minpac.vim
          \--create-dirs
          \https://raw.githubusercontent.com/k-takata/minpac/master/plugin/minpac.vim 
   autocmd VimEnter * packadd minpac
   call minpac#init()
   call minpac#add('k-takata/minpac', {'type': 'opt'})
  endif
else
  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  """"""""""""""""""""""""""""""
  " Load additional plugins below.
  ""
  call minpac#add('machakann/vim-highlightedyank') " name says it all
  call minpac#add('chriskempson/base16-vim') " pretty colors ðŸŒˆ and aesthetics 
  call minpac#add('Yggdroot/indentLine') " Add vertical indentation lines
  call minpac#add('sheerun/vim-polyglot') " lazy load syntax highlighting
  call minpac#add('tpope/vim-commentary') " quickly comment lines
  call minpac#add('junegunn/fzf') " required! the below won't work without this!
  call minpac#add('junegunn/fzf.vim') " fuzzy finding goodness
  call minpac#add('christoomey/vim-tmux-navigator') " vim / tmux navigation
  call minpac#add('w0rp/ale') " ALE Asynchronous Linting Engine
  call minpac#add('tpope/vim-fugitive') " useful for displaying git branch
  call minpac#add('itchyny/lightline.vim') " lightweight status line.
  call minpac#add('ap/vim-buftabline') " lightweight bufferbar @ top, show open buffers.

  """""""""""""""""""""""""""""
  " minpac - conditional plugins
  ""
  if has('nvim')
    call minpac#add('Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' })
    call minpac#add('autozimu/LanguageClient-neovim', {
          \'branch': 'next',
          \'do': {-> system('bash install.sh')}})
    """"""""""""""""""""""""""""""
    " plugin - vim-markdown-composer - preview `.md` docs in default browser
    ""
    call minpac#add('euclio/vim-markdown-composer', { 
          \'do': '!cargo build --release'}, executable('cargo'))
  elseif v:version > 8 || v:version == 8 " Check for Vim8 ...sort of
    call minpac#add('Shougu/deoplete.nvim')
    call minpac#add('roxma/nvim-yarp')
    call minpac#add('roxma/vim-hug-neovim-rpc')
    call minpac#add('autozimu/LanguageClient-neovim', {
          \'branch': 'next', 'do': {-> system('bash install.sh')}})
    call minpac#add('euclio/vim-markdown-composer', { 
          \'do': '!cargo build --release --no-default-features --features json-rpc'}, executable('cargo'))
  endif
  """""""""""""""""""""""""""""
  " minpac - Custom commands
  "" 
  command! PackUpdate packadd minpac | source $MYVIMRC | call minpac#update()
  command! PackClean  packadd minpac | source $MYVIMRC | call minpac#clean()
  command! PackList echo join(minpac#getpackages("minpac", "start"), "\n")

  " Settings for plugins added via minpac.
  if has('nvim')
   " plugin - deoplete
   let g:deoplete#enable_at_startup = 1
   let g:deoplete#sources = {}

   " plugin - LanguageClient-neovim
   let g:LanguageClient_serverCommands = {
         \ 'javascript': ['javascript-typescript-stdio'],
         \ 'typescript': ['javascript-typescript-stdio'],
         \ }
   let g:LanguageClient_logginLeve = 'DEBUG'
   let g:LanguageClient_autostart = 1
   let g:LanguageClient_loadSettings = 1

   " nnoremap <leader>x :call LanguageClient_contextMenu()<CR>


   " NOTE: may need to load these settings after LanguageClient Settings
   let g:deoplete#source = { '_': ['LanguageClient'] }
   " call deoplete#custom#option('sources', { '_': ['LanguageClient'] })

   " call deoplete#initialize()

   set omnifunc=LanguageClient#complete
   set completefunc=LanguageClient#complete

   inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
   inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
   inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"

   inoremap <expr> <C-space> deoplete#manual_complete('omni')

   inoremap <expr> <C-l> deoplete#refresh()

 else
   " Do something fancy ...maybe later
 end

  " let g:LanguageClient_serverCommands = {
  "       \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
  "       \ 'javascript': ['javascript-typescript-stdio'],
  "       \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
  "       \ 'python': ['pyls'],
  "       \ }
  " let g:LanguageClient_autoStart = 1

  " Minimal LSP configuration for JavaScript
  " let g:LanguageClient_serverCommands = {}
  " if executable('javascript-typescript-stdio')
  "   let g:LanguageClient_serverCommands.javascript = ['javascript-typescript-stdio']
  "   " Use LanguageServer for omnifunc completion
  "   autocmd FileType javascript setlocal omnifunc=LanguageClient#complete
  " else

  "
  """""""""""""""""""""""""""""
  " plugin - buftabline
  " NOTE: to reload `buftabline` settings `:call buftabline#update(0)`
  ""
  " let g:buftabline_show=1 " only if >1 buffer
  " let g:buftabline_show=2 " always show buffer bar.
  " let g:buftabline_numbers=2 " oridnal number
  " let g:buftabline_indicators=1 " display state of buffer, `+` = unsaved changes
  " nmap <Leader>1 <Plug>BufTabLine.Go(1)
  " nmap <Leader>2 <Plug>BufTabLine.Go(2)
  " nmap <Leader>3 <Plug>BufTabLine.Go(3)
  " nmap <Leader>4 <Plug>BufTabLine.Go(4)
  " nmap <Leader>5 <Plug>BufTabLine.Go(5)
  " nmap <Leader>6 <Plug>BufTabLine.Go(6)
  " nmap <Leader>7 <Plug>BufTabLine.Go(7)
  " nmap <Leader>8 <Plug>BufTabLine.Go(8)
  " nmap <Leader>9 <Plug>BufTabline.Go(9)

  "
  """""""""""""""""""""""""""""
  " plugin - lightline.vim
  ""
  let g:lightline = {
        \ 'tabline': {'left': [['buffers']], 'right': [['close']]},
        \ 'component_expand': {'buffers': 'lightline#bufferline#buffers'},
        \ 'component_type': {'buffers': 'tabsel'},
        \ 'active': {
        \ 'left': [ [ 'mode', 'paste' ],
        \           [ 'gitbranch', 'readonly', 'filename' ] ],
        \ },
        \ 'component_function': {
        \ 'gitbranch': 'fugitive#head',
        \ 'filename': 'LightlineFilename'
        \ },
        \ }

  let g:lightline#bufferline#show_number = 1
  let g:lightline#bufferline#unnamed = '[No Name]'

  function! LightlineFilename()
    let l:filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
    let l:modified = &modified ? ' +' : ''
    return l:filename . l:modified
  endfunction

  nmap <Leader>1 <Plug>Lightline#bufferline#go(1)
  nmap <Leader>2 <Plug>Lightline#bufferline#go(2)
  nmap <Leader>3 <Plug>Lightline#bufferline#go(3)
  nmap <Leader>4 <Plug>Lightline#bufferline#go(4)
  nmap <Leader>5 <Plug>Lightline#bufferline#go(5)
  nmap <Leader>6 <Plug>Lightline#bufferline#go(6)
  nmap <Leader>7 <Plug>Lightline#bufferline#go(7)
  nmap <Leader>8 <Plug>Lightline#bufferline#go(8)
  nmap <Leader>9 <Plug>Lightline#bufferline#go(9)

  """""""""""""""
  " plugin - lightline - mode map
  " NOTE: abbreviations for mode maps
  " n - normal
  " i - insert
  " R - replace
  " v - visual
  " V - v-line
  " c - command
  " s - select
  " S - s-line
  " t - terminal
  ""
  let g:lightline.mode_map = {
        \ 'n' : 'N',
        \ 'i' : 'I',
        \ 'R' : 'REPLACE',
        \ 'v' : 'VISUAL',
        \ 'V' : 'V-LINE',
        \ "\<C-v>": 'V-BLOCK',
        \ 'c' : 'COMMAND',
        \ 's' : 'SELECT',
        \ 'S' : 'S-LINE',
        \ "\<C-s>": 'S-BLOCK',
        \ 't': 'TERMINAL',
        \ }

  """"""""""""""""""""""""""""""
  " plugin - commentary
  ""
  " Easy commenting in source files using tpope's plugin.
  " CREDIT: https://github.com/neovim/neovim/issues/5052#issuecomment-232083842
  noremap <leader>c :Commentary<cr>

  """"""""""""""""""""""""""""""
  " plugin - FZF
  ""
  if &runtimepath =~# 'fzf'
    nmap ; :Buffers<CR>
    nmap <Leader>f :Files<CR>
    command! FZFMru call fzf#run({
          \  'source':  v:oldfiles,
          \  'sink':    'e',
          \  'options': '-m -x +s',
          \  'down':    '40%'})
    nmap <Leader>r :FZFMru<CR>
    nnoremap <C-p> :<C-u>FZF<CR>
    nnoremap <Leader>m :History<CR>

    " You can set up fzf window using a Vim command (Neovim or Vim 8 required)
    let g:fzf_layout = { 'window': 'enew' }
    let g:fzf_layout = { 'window': '-tabnew' }
    let g:fzf_layout = { 'window': '10split enew' }

    " --column: Show column number
    " --line-number: Show line number
    " --no-heading: Do not show file headings in results
    " --fixed-strings: Search term as a literal string
    " --ignore-case: Case insensitive search
    " --no-ignore: Do not respect .gitignore, etc...
    " --hidden: Search hidden files and folders
    " --follow: Follow symlinks
    " --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
    " --color: Search color options

    command! -bang -nargs=* Find call fzf#vim#grep(
          \'rg
          \--column
          \--line-number
          \--no-heading 
          \--fixed-strings 
          \--ignore-case 
          \--no-ignore 
          \--hidden 
          \--follow 
          \--glob "!.git/*" 
          \--color "always" '.shellescape(<q-args>), 1, <bang>0)
  endif

  """""""""""""""""""""""""""""
  " plugin - indentLine
  ""
  " SEE: https://github.com/Yggdroot/indentLine
  ""
  let g:indentLine_setColors = 1 " overwrite colorscheme, use default grey
  let g:indentLine_setConceal = 0

  """"""""""""""""""""""""""""""
  " plugin - ALE
  ""
  let g:ale_linters = {
        \ 'javascript': ['eslint'],
        \ }
  " Mappings in the style of unimpaired-next
  nmap <silent> [W <Plug>(ale_first)
  nmap <silent> [w <Plug>(ale_previous)
  nmap <silent> ]w <Plug>(ale_next)
  nmap <silent> ]W <Plug>(ale_last)

  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_save = 1 " default
  let g:ale_lint_on_enter = 0
  let g:ale_lint_on_filetype_changed = 0
  let g:ale_sign_error                 = '>>'
  let g:ale_sign_warning               = '--'
  highlight clear ALEErrorSign
  highlight clear ALEWarningSign


endif " END - minpac added plugin settings 

"""""""""""""""""""""""""""""
" For Neovim's eyes only 
""
if has('nvim')
  let g:loaded_sensible=0
  " Keymappings for Neovim
  " Neovim defaults to `<C-\><C-n>` to exit a virtual terminal
  tnoremap <Esc> <C-\><C-n>
  tnoremap <A-[> <Esc>

  if has('nvim-0.1.5')
    set termguicolors " use guifg/guibg instead of ctermfg/ctermbg in terminal
    hi Cursor guifg=green guibg=green
    hi Cursor2 guifg=red guibg=red
    set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50
  elseif
    let $NVIM_TUI_ENABLE_TRUE_COLOR = 1   " Legacy way to enable 24bit color.
  endif
endif " END Neovim only settings

""""""""""""""""""""""""""""""
" filetype syntax highlighting ðŸŒˆ  shit ðŸ’©
""
" augroup filetypedetect
 " autocmd BufNewFile,BufRead *.fish set filetype=fish
" augroup END

""""""""""""""""""""""""""""""
" markdown `.md` syntax support
" NOTE: `conceallevel=0` equals text shown normally, ie. no concealing 
""
augroup markdown_filetype
  autocmd BufNewFile,BufReadPost *.{md,markdown,mkd,mkdn} set filetype=markdown 
augroup END

" for fenced language support in markdown documents
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'js=javascript', 'json=javascript', 'ruby']

"""""""""""""""""""""""""""""'
" shell `.sh` syntax support
""
"""""""""""""""
" NOTE: vim  defaults to `sh` syntax, NOT `bash` syntax for `.sh` files
"""""""""""""""
" SEE: :help ft-sh-syntax
"""""""""""""""
let g:is_bash = 1 " set default sh syntax to that of bash
let g:sh_fold_enabled = 1 " default = 0, 1 = function folding

""""""""""""""""""""""""""""""
" session - settings
""
set sessionoptions=buffers,folds,winsize,blank,slash,unix

""""""""""""""""""""""""""""""
" views - folds, etc etc
""
set foldcolumn=2 " width of gutter outlining folds
" set viewoptions+=folds,slash,unix

""""""""""""""""""""""""""""""
" save view sate
""
" autocmd BufWinLeave * silent! mkview " save view (state) (folds, cursor, etc)
" autocmd BufWinEnter * silent! loadview " load view (state)

" NOTE: DON'T ENABLE `autochdir` makes easier for managing `session.vim` files
" set autochdir " set working directory to the current file

