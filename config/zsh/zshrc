# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
plugins=(
  history-substring-search
  zsh-autosuggestions
)
# git
# fzf

source $ZSH/oh-my-zsh.sh

# User configuration

#-----------------------------------
# ref: https://superuser.com/a/815317/148584
#----
# 0 -- vanilla completion (abc => abc)
# 1 -- smart case completion (abc => Abc)
# 2 -- word flex completion (abc => A-big-Car)
# 3 -- full flex completion (abc => ABraCadabra)
# zstyle ':completion:*' matcher-list '' \
#   'm:{a-z\-}={A-Z\_}' \
#   'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
#   'r:|?=** m:{a-z\-}={A-Z\_}'

# export MANPATH="/usr/local/man:$MANPATH"

# setup locale to try and make gpg happy *crossfingers
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nvim'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

#-----------------------------
# Aliases for interactive shell sessions
#-
alias ..='cd ..'
alias cd..='cd ..'

# alias l='ls -lahF --color=auto'
# NOTE: for reasons i don't understand, full path required
alias l='/bin/ls -lahFG'
alias ls='/bin/ls -G'
alias lr='/bin/ls -lrthFG'

alias e='echo'
alias cp='cp -iv'
alias rm='rm -iv'
alias mv='mv -iv'
# move quickly to directories
alias dots='cd $HOME/code/dotfiles-chris'
alias dotfiles='cd $HOME/code/dotfiles-chris'

# `git` aliases for git projects
alias gs='git status'
alias gd='git diff --stat'
# alias ga='git add --all'
alias gp='git push'

# "storage" aliases
alias df='df -h'
alias du='du -sh'

## no dupes
HISTCONTROL=ignoredups:erasedups
# append on exit
setopt histappend
# if cmd begins with space do NOT add to history ðŸ¤«
setopt HIST_IGNORE_SPACE

# nuke $PATH because I manually set it up below
# NOTE: since $PATH is being nuked for each interactive zsh session there presently isn't a need to check for duplicate path entries, "BONUS".
PATH=""

#----------------------------------------------
# my functions
#---

# pretty print my path entries
pp() {
  local count=1
  for p in $(echo $PATH | tr ":" "\n"); do
    echo "$count. $p"
    ((count++))
  done
}

# https://www.techspeak.dev/2019/01/14/improve-your-git-flow-with-fuzzy-find.html
ga(){
  if [ $# -eq 0 ]; then
    gfuz git add
  else
    git add "$@"
  fi
}

# func to calc sha256sum of remote file via curl
sharemo() {
    if [[ -z $1 ]]; then
        echo "Usage: download_and_verify <url>"
        return 1
    fi

    local url=$1
    local filename=$(basename $url)
    local sha256sum_file="${filename}.sha256"

    echo "Downloading file from ${url}..."
    curl -sSL "${url}" -o "${filename}"

    if [[ $? -ne 0 ]]; then
        echo "Failed to download file."
        return 1
    fi

    echo "Calculating SHA256 checksum..."
    local calculated_sha256sum=$(sha256sum "${filename}" | awk '{print $1}')

    echo "SHA256 checksum: ${calculated_sha256sum}"

    echo "Cleaning up..."
    rm -f "${filename}"

    return 0
}

# setup an $OS env var for distinguishing between different Operating Systems
# NOTE: Darwin = macOS, Linux = Debian; and other assorted Linux distros
if [ -x /usr/bin/uname ]; then
  os=$(/usr/bin/uname)
  export os
elif [ -x /bin/uname ]; then
  os=$(/bin/uname)
  export os
fi

# some homebrew magic
if [ "$os" = Darwin ]; then
  if [ -e "$HOME/homebrew/bin/brew" ]; then
    bp="$HOME/homebrew"
  elif [ -e /usr/local/bin/brew ]; then
    bp="/usr/local"
  fi
elif [ "$os" = Linux ] && [ -e /home/linuxbrew/.linuxbrew/bin/brew ]; then
  bp="/home/linuxbrew/.linuxbrew"
fi
export bp

# TODO: conditionally only add paths for different operating systems
# NOTE: since $PATH has been nuked, these paths are added from top to bottom, ie. .../sbin will be the 2nd entry in $PATH unless other bash files hijack the $PATH; ...i'm looking at you asdf
# below entries will be appened to $PATH
PATH=$PATH:$HOME/.npm/bin
PATH=$PATH:$HOME/.local/bin
PATH=$PATH:$bp/sbin
PATH=$PATH:$bp/bin
# PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
PATH=$PATH:/usr/sbin
PATH=$PATH:/usr/bin
PATH=$PATH:/sbin
PATH=$PATH:/bin
PATH=$PATH:/Library/Apple/usr/bin

export XDG_CONFIG_HOME="$HOME/.config"
export GPG_TTY=$(tty)

function cdh() {
    dirs -v | awk 'BEGIN {OFS="\t"} {print NR, $0}'
}

# homebrew related env vars
export HOMEBREW_NO_INSTALL_CLEANUP=1
export HOMEBREW_EDITOR="nvim"
export HOMEBREW_NO_GITHUB_API=1
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
export HOMEBREW_DEVELOPER=1
export hbfc="$bp/Library/Taps/freecad/homebrew-freecad"

# TODO: dynamically setup HOMEBREW_TEMP based on system

# my custom env vars
# TODO: make a check for code then create the env var, as my `code` differs per system
export code="$HOME/code"
export fcgit="$HOME/code/freecad-git"

alias bp310="$bp/opt/python@3.10/bin/python3.10"
alias bp311="$bp/opt/python@3.11/bin/python3.11"
alias bp312="$bp/opt/python@3.12/bin/python3.12"
alias sr='exec $SHELL'

alias gfuz='git ls-files -m -o --exclude-standard | fzf --print0 -m -1 | xargs -0 -t -o'
alias gdf='gfuz git diff'

#------------------------------------------------------------------------------
# To initialize zoxide, add this to your configuration (usually ~/.zshrc):
#
eval "$(zoxide init zsh)"

