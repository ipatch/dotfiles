# This is Git's per-user configuration file.
# NOTE: `git` alias(es) are processed using a POSIX shell, NOT fish-shell
# NOTE: to rm values from CLI `git config --global --unset user.{name,email}

[i18n]
  filesEncoding = utf-8

[alias]
  # Clone a repository including all submodules
  c = clone --recursive
  clone = clone --recursive

  # branching
  b = branch
  
  ####
  # logging
  ##
  l = log --graph --pretty=format:'%C(yellow)%h%C(bold white red)%d%Creset %s %C(bold green)%cr %Creset%C(white)%an' --abbrev-commit --date=relative

  ####
  # checking out
  ##
  co = checkout
  cb = checkout -b
  master = checkout master

  ####
  # adding / staging files
  ##
  aa = add --all

  ####
  # commiting
  ##
  ci = commit
  ca = commit --amend
  # `-S` will sign commits
  cm = commit -S -m
  ac = commit -am
  aac = "!git aa; "git commit -m""
  ####
  # for those random quick & fun commits üëç
  ##
  random = "!git smf "git add --all"; git add .; git commit -m \"`fortune`\""

  ####
  # pushing
  ##
  pom = push origin master
  pshom = !git push origin master
  pshsmom = !git push --recurse-submodules=on-demand origin master

  ####
  # pulling
  ##
  p = !git pull
  # TODO: add a `pull` to recursively pull submodules
  ps = !git pull 

  ####
  # diff
  ##
  d = diff
  dc = diff --cached

  ####
  # fetch
  ##
  fo = fetch origin

  ####
  # merge
  ##
  m = merge

  ####
  # status
  ##
  st = status
  s = status --short --branch
  # list contributors with number of commits
  sl = shortlog --summary --numbered

  ####
  # remote
  ##
  remotes = remote --verbose
  r = remote --verbose

  ####
  # tag
  ##
  t = tag
  # show verbose output about tags
  tags = tag --list
  # USAGE: git tag-mv [name-of-old-tag] [name-of-new-tag]
  # EXAMPLE: git tag-mv v0.1.2.2 v0.1.2.3
  tag-mv   = "!sh -c 'set -e;git tag $2 $1; git tag -d $1;git push origin :refs/tags/$1;git push --tags' -"

  ####
  # üö® Danger zone üö®
  ##
  
  ####
  # to undo the last added / staged files
  ##
  undoadd = "!git reset HEAD -- ."
  undostage = reset HEAD

  ####
  # to undo the last commit
  ##
  undoci = "!git reset HEAD~"

  # Undo a `git push`
  undopush = push -f origin HEAD^:master
  ####
  # `restore` try and "undelete" a file
  ##
  restore = "!git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1""
  
  ####
  # git extras
  ##

  ####
  # randos
  ##
  last = show --show-signature
  
  ####
  # submodules -- ie. add, commit, push
  ##
  sm = submodule
  smu = submodule update
  smi = submodule init
  smf = submodule foreach --recursive
  smrupdate = submodule update --recursive --remote
  update = '!git pull; git submodule update --init --recursive'
  sma = "!git smf "git add --all";"
  ###
  # TODO: figure out how to submit a commit message from CLI
  ###
  smac = "!git smf "git commit -a"; git commit -a;"
  ###
  # push all files including submodule files
  ###
  smp = "!git push --recurse-submodules=on-demand"
  
  ####
  # Useful Commands üëå -- compound commands
  ##
  
  # Get a list of your defined aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

  # Remove branches that have already been merged with master, a.k.a. ‚Äòdelete merged‚Äô
  clean-branches = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Pull in remote changes for the current repository and all its submodules
  pull-all = !"git pull && git submodule foreach git pull origin master"

  # Prune all your stale remote branches
  prune-all = !git remote | xargs -n 1 git remote prune

  # If upstream applied a slightly modified patch, and you want to see the
  # modifications, you should use the program interdiff of the patchutils
  # package. This accept two commits, typically the first coming from upstream
  # (e.g. origin/master) and the second coming from your own topic branch.
  intercommit = !sh -c 'interdiff <(git show $1) <(git show $2) | less -FRS' -

  # graph
  graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
	identity = "! git config user.name $(git config user.$1.name); git config user.email $git config user.$1.eail); :"

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
  remote = origin

[advice]
  statusHints = false # makes status messages more terse. üëç

[core]
  editor = nvim
	excludesfile = /home/capin/.config/git/gitexcludes
	attributes = /home/capin/.config/git/attributes
  ##############################
  # Make macOS, Linux, and Windows all play nice
  ##
  ###############
  # Windows
  ##
  # autocrlf = true
  ###############
  # macOS / Linux specific
  ##
	autocrlf = input
  ###############################
  # To set a `core.excludesfile` on a per $HOME dir basis, see `config.fish or `.bashrc`

[color]
  ui = auto
  branch = auto
  diff = auto
  status = auto
  grep = auto
  interactive = auto
  pager = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  tool = vimdiff
  conflictstyle = diff3

[mergetool]
  prompt = false

[push]
  default = simple # git >= 1.8+ required

# `git config --global diff.submodule log` will add the below 2 lines
[diff]
  submodule = log

[status]
  submodulesummary = 1

[commit]
  # gpgsign = true
  verbose = true
	gpgsign = true

[fetch]
  prune = true

[rebase]
  stat = true

[gpg]
  # Make certain `gpg` is in the $USER $PATH
	program = gpg

[init]
  templatedir = ~/.config/git/git-templates

##############################
# Identity bull shit
##
[user]
	name = Chris Jones
  # Note: GitHub and git associate commits with email addresses
  email = chris.r.jones.1983@gmail.com
	useConfigOnly = true
	signingkey = CDE31AD7ED85062F02F01B40F115EA48338F11B7

[github]
	name = ipatch
	email = chris.r.jones.1983@gmail.com

[gitlab]
	name = truckmonth
  email = me@chrisrjones.com
  #signingKey = CD688E9D

[bitbucket]
  name = ipatch
  email = chrisr.r.jones.1983@gmail.com

# NOTE: the below settings require at least git v2.13
# [includeIf ="gitdir:/opt/code/dotfiles/"
#  path = /opt/code/dotfiles/.gitconfig

####
# TODO: figure out what all this URL shorthand shit means
##

# URL shorthands
[url "git@gitlab.com"]
  insteadOf = "gl:"
  pustInsteadOf = "gitlab:"

[url "git@github.com"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"

[url "git://bitbucket.org:"]
  insteadOf = "bb:"
