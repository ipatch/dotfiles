# NOTE: ipatch, my current (2023) global config.fish - single file

if status is-interactive
  # Commands to run in interactive sessions can go here
  alias gs='git status'
  alias l='ls -lah'
  alias ffprobe='ffprobe -hide_banner'
  alias ffmpeg='ffmpeg -hide_banner'
  alias pgrep='pgrep -i'

  # builtin env vars
  set -gx fish_greeting ""
  set -gx fish_emoji_width 2 # NOT COMPATIBLE with fish <= 2.7.1
  set -gx XDG_CONFIG_HOME $HOME/.config
  # GPG key signing
  export GPG_TTY=(tty)

  # $USER tooling / js / node / nvm
  set -gx NVM_DIR "$HOME/.config/nvm"

  # $USER env vars
  set -gx code "/opt/code"
  set -gx dots "/opt/code/dotfiles"
  set -gx archdots "$dots/jobs/Linux/arch"
  set -gx github "/opt/code/git/github"
  set -gx ghforks "/opt/code/git/github/forks"
  set -gx ltmp "$HOME/ltmp"
  set -gx hb "$HOME/homebrew"

  # app env vars
  export HOMEBREW_NO_INSTALL_CLEANUP=1
  export HOMEBREW_EDITOR=nvim

  # $USER specific abbreviations
  abbr -a -g -- fr 'exec fish'
  abbr -a -g -- pp 'string join \n $PATH | nl  '
  abbr -a -g -- lr 'ls -lrth'
  abbr -a -g -- dots 'cd $dots'
  abbr -a -g -- gitc 'git commit -m'
  abbr -a -g -- gp 'git push -q'
  abbr -a -g -- cpv 'rsync -at --no-o --no-g -h --info=progress2 -P'
  abbr -a -g -- mkdir 'mkdir -p'
  abbr -a -g -- d 'docker'
  abbr -a -g -- rmd 'rm -rf'
  abbr -a -g -- youdl 'yt-dlp'
  abbr -a -g -- ydl 'yt-dlp'
  abbr -a -g -- ksong 'open https://www.kntu.com/last-7-days-of-music-on-kntu/'
  abbr -a -g -- e 'echo'
  abbr -a -g -- df 'df -h'

  abbr -a -g -- be 'bundle exec'

  # fish shell abbr / gnu+linux specific
  #
  # NOTE: ipatch, the below cmd will nuke the $DISPLAY env var  🤷‍♂️
  abbr -a -g -- hlp.group.reload 'echo "exec su -l $USER"'

  abbr -a -g -- clear.journal 'sudo journalctl --rotate; sudo journalctl --vacuum-time=1s'
  abbr -a -g -- sc.clear.journal 'sudo journalctl --rotate; sudo journalctl --vacuum-time=1s'
  abbr -a -g -- yay.up.zfs 'yay -Sa --nodeps zfs-dkms zfs-utils'
  abbr -a -g -- sc 'sudo systemctl'
  abbr -a -g -- ys 'yay -S'
  abbr -a -g -- yss 'yay -Ss'
  # TODO: ipatch, below abbr probably better served as a function that can take arg for custom msgs
  abbr -a -g -- alert 'notify-send -t 0 doitlive'
  abbr -a -g -- pbcopy 'xclip -selection clipboard'

  # nice things
  if which zoxide >/dev/null
    zoxide init fish | source
  end

  # NOTE: ipatch, $USER lang tooling $PATHs

  # NOTE: ipatch, yay on archlinux failed to install solvespace with hb_bins first in PATH
  #
  # REF: https://github.com/fish-shell/fish-shell/issues/2090#issuecomment-149990142
  #
  # TODO: ipatch, the below 2 dirs are added to the path regardless if the dirs exist or not
  # NOTE: ipatch, fish does not play well with `~` use $HOME env var instead
  set -gx hb_bins (echo "$HOME/homebrew/sbin:$HOME/homebrew/bin" | string split ":")
  if not contains $hb_bins $PATH
    set -gx PATH $PATH $hb_bins
  end

# NOTE: ipatch, be sure to link the `rvm.fish` in the `~/.config/fish/functions`
  set -gx rvm_bin (echo "$HOME/.rvm/bin")
  if not contains $rvm_bin $PATH
    set -gx PATH $PATH $rvm_bin
  end

  set -gx bun_bin (echo "$HOME/.bun/bin")
  if not contains $bun_bin $PATH
    set -gx PATH $PATH $bun_bin
  end

  # NOTE: ipatch prepend my local git src builds first
  set -gx git_src_bin (echo "$code/git/local/bin")
  if not contains $git_src_bin $PATH
    set -gx PATH $git_src_bin $PATH
  end

  # set created & updated files & directories to 664 & 775
  umask 002

  # check if file exists, if so, then load it
  if test -f $dots/config/fish/private-env-vars.fish
    source $dots/config/fish/private-env-vars.fish
  end

  # $USER functions
  function mkcd --description '`mkdir` then `cd` into it'
    mkdir -p $argv; and cd $argv
  end

  function vman --wraps man --description 'use vim / nvim for reading man pages'
    # col `-b` flag = don't output any backspaces
    # col `-p` flag = force uknown control sequences
    # ---
    # iconv -convert between character encodings
    # --
    # iconv `-c` flag = characters that can't be converter are
    # ...silently discarded
    # ---
    # nvim `-c` flag = run argument / command after executing nvim
    # nvim `-R` flag = open "file" in read-only mode
    # ---
    # NOTE: not loading `.vimrc` won't work because i want some bells and whistles provided by my `.vimrc`, ie. syntax highlighting.
    man $argv | col -bp | iconv -c | nvim -c 'set ft=man nomod nolist' -;
  end
end
