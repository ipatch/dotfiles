# This is Git's per-user configuration file.
# NOTE: `git` alias are processed using a POSIX shell, NOT fish-shell

[alias]
  # Clone a repository including all submodules
  c = clone --recursive
  
  ###
  # logging
  ###
  l = log --graph --pretty=oneline

	
  ###
  # checking out
  ###
  co = checkout
  cb = checkout -b
  master = checkout master

  ###
  # adding / staging files
  aa = add --all

  ###
  # commiting
  ###
  ci = commit
  ca = commit --amend
  cm = commit -S -m
  ac = commit -am
  ###
  # for those random quick & fun commits üëç
  ###
  random = "!git smf "git add --all"; git add .; git commit -m \"`fortune`\""

  ###
  # pushing
  ###
  pom = push origin master
  pshom = !git push origin master
  pshsmom = !git push --recurse-submodules=on-demand origin master


  ###
  # pulling
  ###
  p = !git pull
  ps = !git pull; and git submodule update 

  ###
  # diff
  ###
  d = diff
  dc = diff --cached

  fo = fetch origin

  m = merge

  ###
  # statusing
  ##
  st = status
  s = status --short --branch
  # list contributors with number of commits
  sl = shortlog --summary --numbered

  ###
  # remotes
  ###
  remotes = remote --verbose

  ###
  # tagging
  ###
  t = tag
  # show verbose output about tags
  tags = tag --list

  ###
  # üö® Danger zone üö®
  ###
  # Undo a `git push`
  undopush = push -f origin HEAD^:master
  
  ###
  # to undo the last added / staged files
  ###
  undoadd = "!git reset HEAD -- ."
  unstage = reset HEAD

  ###
  # to undo the last commit
  ###
  undoci = "!git reset HEAD~"

  ###
  # `restore` try and "undelete" a file
  ###
  ; restore = '!f() { git checkout $(git rev-list -n 1 HEAD -- $1)~1 -- $(git diff --name-status $(git rev-list -n 1 HEAD -- $1)~1 | grep '^D' | cut -f 2); }; f'
  # restore = "!git checkout (git rev-list -n 1 HEAD -- '$argv')^ -- '$argv'"
  restore = "!git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1""
  
  ###
  # git extras
  ###
  # cl = changelog --list
  # copy = copy-branch
  # dmb = delete-merged-branches

  ###
  # randos
  ###
  last = show --show-signature
  
  ###
  # working with submodules, ie. add, commit, push
  ###
  sm = submodule
  smu = submodule update
  smi = submodule init
  smf = submodule foreach --recursive
  smrupdate = submodule update --recursive --remote
  update = '!git pull; git submodule update --init --recursive'
  sma = "!git smf "git add --all";"
  ###
  # TODO: figure out how to submit a message from CLI
  ###
  smac = "!git smf "git commit -a"; git commit -a;"
  ###
  # push all files including submodule files
  ###
  smp = "!git push --recurse-submodules=on-demand"
  
  ###
  # Useful Commands üëå -- compound commands
  ###
  
  # Get a list of your defined aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

  # Remove branches that have already been merged with master, a.k.a. ‚Äòdelete merged‚Äô
  clean-branches = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Pull in remote changes for the current repository and all its submodules
  pull-all = !"git pull && git submodule foreach git pull origin master"

  # Prune all your stale remote branches
  prune-all = !git remote | xargs -n 1 git remote prune

  # If upstream applied a slightly modified patch, and you want to see the
  # modifications, you should use the program interdiff of the patchutils
  # package. This accept two commits, typically the first coming from upstream
  # (e.g. origin/master) and the second coming from your own topic branch.
  intercommit = !sh -c 'interdiff <(git show $1) <(git show $2) | less -FRS' -

  # graph
  graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
  remote = origin
  # merge = refs/heads/master

[core]
  attributesfile = $HOME/.gitattributes
  editor = nvim
  excludesFile = $XDG_CONFIG_HOME/git/ignore

[color]
  ui = auto
  branch = auto
  diff = auto
  status = auto
  grep = auto
  interactive = auto
  pager = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[push]
  default = simple # git 1.8+ required

# URL shorthands
[url "git@github.com"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
[url "git://bitbucket.org:"]
  insteadOf = "bb:"

[diff]
  submodule = log

[status]
  submodulesummary = 1

[commit]
  # gpgsign = true
  verbose = true

[fetch]
  prune = true

[rebase]
  stat = true

[gpg]
  program = gpg

[user]
	name = ipatch
	email = chris.r.jones.1983@gmail.com
  #signingKey = CD688E9D
